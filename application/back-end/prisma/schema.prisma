// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String              @id @default(cuid())
  name                 String?
  email                String?             @unique
  emailVerified        DateTime?
  image                String?
  role                 Role                @default(USER)
  points               Int                 @default(0)
  pointTransactions    PointTransaction[]
  accounts             Account[]
  sessions             Session[]
  subscription         Subscription?
  credit               Credit?
  challenges           Challenge[]
  userChallenges       UserChallenge[]
  challengeSubmissions ChallengeSolution[]
  feedbacks            Feedback[]
}

model PointTransaction {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  points      Int
  type        String
  referenceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                        Int                  @id @default(autoincrement())
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt
  subscribed                Boolean
  subscription_id           String
  subscription_duration     SubscriptionDuration
  subscribed_at             DateTime?
  subscription_end_at       DateTime?
  subscription_cancelled_at DateTime?
  user                      User                 @relation(fields: [userId], references: [id])
  userId                    String               @unique
}

model WebhookEvent {
  id                    String   @id @default(uuid())
  event_type            String
  event_idempotency_key String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Credit {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  challenge_amount Int      @default(0)
  design_amount    Int      @default(0)
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @unique
}

model Challenge {
  id                      String              @id @default(uuid())
  name                    String              @unique
  slug                    String              @unique
  description             String
  language                Language
  difficulty              Difficulty
  points                  Int
  brief                   String
  tips                    String
  assets_presentation     String[]
  premium                 Boolean
  starter_code_path_file  String
  starter_figma_path_file String
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  createdBy               User                @relation(fields: [createdById], references: [id])
  createdById             String
  userChallenges          UserChallenge[]
  challengeSolutions      ChallengeSolution[]

  @@index([name])
}

model ChallengeSolution {
  id                     String     @id @default(uuid())
  title                  String
  repository_url         String
  live_preview_url       String
  stacks                 String[]
  solution_retrospective String
  user                   User       @relation(fields: [userId], references: [id])
  userId                 String
  challenge              Challenge  @relation(fields: [challengeId], references: [id])
  challengeId            String
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  feedbacks              Feedback[]

  @@unique([userId, challengeId])
}

model Feedback {
  id                  String            @id @default(uuid())
  comment             String
  rating              Int               @default(0)
  user                User              @relation(fields: [userId], references: [id])
  userId              String
  challengeSolution   ChallengeSolution @relation(fields: [challengeSolutionId], references: [id])
  challengeSolutionId String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([userId])
  @@index([challengeSolutionId])
}

model UserChallenge {
  id                  String    @id @default(uuid())
  figma_file_unlocked Boolean   @default(false)
  startedAt           DateTime  @default(now())
  completedAt         DateTime?
  user                User      @relation(fields: [userId], references: [id])
  userId              String
  challenge           Challenge @relation(fields: [challengeId], references: [id])
  challengeId         String

  @@unique([userId, challengeId])
}

enum Role {
  USER
  COLLABORATOR
  ADMIN
}

enum Language {
  HTML_CSS
  JS
  API
}

enum Difficulty {
  NEWBIE
  JUNIOR
  INTERMEDIATE
  ADVANCED
  GURU
}

enum SubscriptionDuration {
  MONTHLY
  YEARLY
}
